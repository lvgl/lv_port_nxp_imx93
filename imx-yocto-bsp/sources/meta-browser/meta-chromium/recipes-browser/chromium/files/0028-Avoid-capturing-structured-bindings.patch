From 4dfebd313fabd79aaf679f6b01581483ed323787 Mon Sep 17 00:00:00 2001
From: Max Ihlenfeldt <max@igalia.com>
Date: Tue, 13 Jun 2023 15:48:12 +0000
Subject: [PATCH] Avoid capturing structured bindings

Similar to https://crrev.com/c/4526976, this patch removes some uses of
structured bindings that lead to compile errors when using older
versions of clang (observed with clang 15).

Upstream-Status: Inappropriate [specific to older versions of clang]
Signed-off-by: Max Ihlenfeldt <max@igalia.com>
---
 chrome/browser/ui/autofill/chrome_autofill_client.cc      | 4 +++-
 .../service_worker/service_worker_context_wrapper.cc      | 3 ++-
 media/base/cdm_promise_adapter.cc                         | 8 ++++----
 .../core/layout/ng/grid/ng_grid_layout_algorithm.cc       | 8 ++++++--
 4 files changed, 15 insertions(+), 8 deletions(-)

diff --git a/chrome/browser/ui/autofill/chrome_autofill_client.cc b/chrome/browser/ui/autofill/chrome_autofill_client.cc
index cefb0eb..ecc2c67 100644
--- a/chrome/browser/ui/autofill/chrome_autofill_client.cc
+++ b/chrome/browser/ui/autofill/chrome_autofill_client.cc
@@ -1100,7 +1100,9 @@ void ChromeAutofillClient::PropagateAutofillPredictionsDeprecated(
           &renderer_form);
     }

-    for (const auto& [frame_token, frame_forms] : renderer_forms_by_frame) {
+    for (const auto& it : renderer_forms_by_frame) {
+      const auto& frame_token = it.first;
+      const auto& frame_forms = it.second;
       // Attempt to find the RFH with this `frame_token`.
       content::RenderFrameHost* rfh = nullptr;
       GetWebContents().ForEachRenderFrameHost(
diff --git a/content/browser/service_worker/service_worker_context_wrapper.cc b/content/browser/service_worker/service_worker_context_wrapper.cc
index 0d1a5e0..d1ff819 100644
--- a/content/browser/service_worker/service_worker_context_wrapper.cc
+++ b/content/browser/service_worker/service_worker_context_wrapper.cc
@@ -1409,9 +1409,10 @@ void ServiceWorkerContextWrapper::MaybeProcessPendingWarmUpRequest() {
   auto [document_url, key, callback] = std::move(*request);

   DCHECK(document_url.is_valid());
+  auto document_url_spec = document_url.spec();
   TRACE_EVENT1("ServiceWorker",
                "ServiceWorkerContextWrapper::MaybeProcessPendingWarmUpRequest",
-               "document_url", document_url.spec());
+               "document_url", document_url_spec);

   context_core_->registry()->FindRegistrationForClientUrl(
       ServiceWorkerRegistry::Purpose::kNotForNavigation,
diff --git a/media/base/cdm_promise_adapter.cc b/media/base/cdm_promise_adapter.cc
index f013809..144809b 100644
--- a/media/base/cdm_promise_adapter.cc
+++ b/media/base/cdm_promise_adapter.cc
@@ -94,12 +94,12 @@ void CdmPromiseAdapter::RejectPromise(uint32_t promise_id,
 void CdmPromiseAdapter::Clear(ClearReason reason) {
   // Reject all outstanding promises.
   DCHECK(thread_checker_.CalledOnValidThread());
-  for (auto& [promise_id, promise] : promises_) {
+  for (auto& promise : promises_) {
     TRACE_EVENT_NESTABLE_ASYNC_END1(
-        "media", "CdmPromise", TRACE_ID_WITH_SCOPE("CdmPromise", promise_id),
+        "media", "CdmPromise", TRACE_ID_WITH_SCOPE("CdmPromise", promise.first),
         "status", "cleared");
-    promise->reject(CdmPromise::Exception::INVALID_STATE_ERROR,
-                    ToSystemCode(reason), "Operation aborted.");
+    promise.second->reject(CdmPromise::Exception::INVALID_STATE_ERROR,
+                           ToSystemCode(reason), "Operation aborted.");
   }
   promises_.clear();
 }
diff --git a/third_party/blink/renderer/core/layout/ng/grid/ng_grid_layout_algorithm.cc b/third_party/blink/renderer/core/layout/ng/grid/ng_grid_layout_algorithm.cc
index de1d5fc..5b08cdb 100644
--- a/third_party/blink/renderer/core/layout/ng/grid/ng_grid_layout_algorithm.cc
+++ b/third_party/blink/renderer/core/layout/ng/grid/ng_grid_layout_algorithm.cc
@@ -3431,7 +3431,9 @@ void NGGridLayoutAlgorithm::PlaceGridItems(
   DCHECK(out_row_break_between);

   const auto& container_space = ConstraintSpace();
-  const auto& [grid_items, layout_data, tree_size] = sizing_tree.TreeRootData();
+  const auto& grid_items = sizing_tree.TreeRootData().grid_items;
+  const auto& layout_data = sizing_tree.TreeRootData().layout_data;
+  const auto& tree_size = sizing_tree.TreeRootData().subtree_size;

   const auto* cached_layout_subtree = container_space.GridLayoutSubtree();
   const auto container_writing_direction =
@@ -3595,7 +3597,9 @@ void NGGridLayoutAlgorithm::PlaceGridItemsForFragmentation(

   // TODO(ikilpatrick): Update |SetHasSeenAllChildren| and early exit if true.
   const auto& constraint_space = ConstraintSpace();
-  const auto& [grid_items, layout_data, tree_size] = sizing_tree.TreeRootData();
+  const auto& grid_items = sizing_tree.TreeRootData().grid_items;
+  const auto& layout_data = sizing_tree.TreeRootData().layout_data;
+  const auto& tree_size = sizing_tree.TreeRootData().subtree_size;

   const auto* cached_layout_subtree = constraint_space.GridLayoutSubtree();
   const auto container_writing_direction =
