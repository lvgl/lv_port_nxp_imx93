/*
*  Copyright (c) 2020, The OpenThread Authors.
*  Copyright 2023-2024 NXP
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions are met:
*  1. Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
*  2. Redistributions in binary form must reproduce the above copyright
*     notice, this list of conditions and the following disclaimer in the
*     documentation and/or other materials provided with the distribution.
*  3. Neither the name of the copyright holder nor the
*     names of its contributors may be used to endorse or promote products
*     derived from this software without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
*  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
*  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
*  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
*  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
*  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
*  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
*  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*  POSSIBILITY OF SUCH DAMAGE.
*/

diff --git a/include/openthread/platform/radio.h b/include/openthread/platform/radio.h
index c38df1a15..cb200d682 100644
--- a/include/openthread/platform/radio.h
+++ b/include/openthread/platform/radio.h
@@ -1300,6 +1300,12 @@ otError otPlatRadioSetIeeeEui64(otInstance *aInstance, const otExtAddress *aIeee
  */
 otError otPlatRadioSetTxPowerLimit(otInstance *aInstance, uint8_t txPowerLimit);
 
+/**
+ * @}
+ *
+ */
+otError otPlatRadioMfgCommand(otInstance *aInstance, uint8_t *payload, const uint8_t payloadLenIn, uint8_t *payloadLenOut);
+
 #ifdef __cplusplus
 } // end of extern "C"
 #endif
diff --git a/src/lib/spinel/radio_spinel.hpp b/src/lib/spinel/radio_spinel.hpp
index e2c88d603..c8d6ae111 100644
--- a/src/lib/spinel/radio_spinel.hpp
+++ b/src/lib/spinel/radio_spinel.hpp
@@ -195,6 +195,13 @@ public:
      */
     otError SetTxPowerLimit(uint8_t txPowerLimit);
 
+    /**
+     * @brief GetMfgChannel
+     * @param channel
+     * @return otError
+     */
+    otError MfgCmd(uint8_t *payload, const uint8_t payloadLenIn, uint8_t &payloadLenOut);
+
     /**
      * Sets the Extended Address for address filtering.
      *
diff --git a/src/lib/spinel/radio_spinel_impl.hpp b/src/lib/spinel/radio_spinel_impl.hpp
index 9d5b29140..a66ba33e6 100644
--- a/src/lib/spinel/radio_spinel_impl.hpp
+++ b/src/lib/spinel/radio_spinel_impl.hpp
@@ -1067,6 +1067,21 @@ exit:
     return error;
 }
 
+#define MAXBUFFERSIZE 16
+
+template <typename InterfaceType>
+otError RadioSpinel<InterfaceType>::MfgCmd(uint8_t *payload, const uint8_t payloadLenIn, uint8_t &payloadLenOut)
+{
+    otError error;
+    uint8_t buffer[MAXBUFFERSIZE]; //temporary buffer used to be passed as arg of GetWithParam
+    spinel_ssize_t packed;
+
+    packed = spinel_datatype_pack(buffer, sizeof(buffer), SPINEL_DATATYPE_DATA_S, payload, payloadLenIn);
+    error = GetWithParam(SPINEL_CMD_VENDOR_NXP_MFG, buffer, static_cast<spinel_size_t>(packed), SPINEL_DATATYPE_DATA_S, payload, &payloadLenOut);
+
+    return error;
+}
+
 template <typename InterfaceType>
 otError RadioSpinel<InterfaceType>::SetExtendedAddress(const otExtAddress &aExtAddress)
 {
diff --git a/src/lib/spinel/spinel.h b/src/lib/spinel/spinel.h
index 7ceae572d..92455218b 100644
--- a/src/lib/spinel/spinel.h
+++ b/src/lib/spinel/spinel.h
@@ -4871,6 +4871,7 @@ enum
     SPINEL_PROP_VENDOR_NXP_IR_CMD        = (SPINEL_PROP_VENDOR__BEGIN + 0x101),
     SPINEL_PROP_VENDOR_NXP_SET_EUI64_CMD = (SPINEL_PROP_VENDOR__BEGIN + 0x10A),
     SPINEL_PROP_VENDOR_NXP_SET_TXPOWERLIMIT_CMD = (SPINEL_PROP_VENDOR__BEGIN + 0x10B),
+    SPINEL_CMD_VENDOR_NXP_MFG  = (SPINEL_CMD_VENDOR__BEGIN + 0x3FF),
 
     SPINEL_PROP_VENDOR__END   = 0x4000,
 
diff --git a/src/posix/main.c b/src/posix/main.c
index 3ad3ddf45..5e41a2aa3 100644
--- a/src/posix/main.c
+++ b/src/posix/main.c
@@ -70,6 +70,28 @@
 
 #include "lib/platform/reset_util.h"
 
+#define MFG_CMD_ACTION_GET 0
+#define MFG_CMD_ACTION_SET 1
+
+#define MFG_CMD_GET_SET_CHANNEL 0x0b      // 11
+#define MFG_CMD_GET_SET_TXPOWER 0x0f      // 15
+#define MFG_CMD_CONTINUOUS_TX 0x11        // 17
+#define MFG_CMD_GET_SET_PAYLOAD_SIZE 0x14 // 20
+#define MFG_CMD_GET_RX_RESULT 0x1f        // 31
+#define MFG_CMD_START_RX_TEST 0x20        // 32
+#define MFG_CMD_BURST_TX 0x21             // 33
+#define MFG_CMD_DUTY_CYCLE_TX 0x23        // 35
+#define MFG_CMD_GET_SET_CCA_THRESHOLD  0x2F   // 47
+#define MFG_CMD_CONTINOUS_CCA_TEST 0X31   //49
+#define MFG_CMD_GET_CCA_STATUS 0x32       //50
+#define MFG_CMD_CONTINOUS_ED_TEST 0x37    //55
+#define MFG_CMD_GET_ED_VALUE    0x38      //56
+#define MFG_CMD_PHY_TX_TEST_PSDU 0x39     //57
+#define MFG_CMD_PHY_RX_TX_ACK_TEST 0x3A   //58
+#define MFG_CMD_SET_GENERIC_PARAM 0x3B    //59
+
+uint8_t mfgEnable = 0;
+
 /**
  * Initializes NCP app.
  *
@@ -464,7 +486,7 @@ static otError ProcessSetTxPowerLimit(void *aContext, uint8_t aArgsLength, char
     if( aArgsLength == 1 )
     {
         uint8_t txPowerLimit = (uint8_t)atoi(aArgs[0]);
-        if((txPowerLimit>=1)&&(txPowerLimit<=22)){
+        if((txPowerLimit>=1)&&(txPowerLimit<=44)){
             syslog(LOG_INFO, "-> txPowerLimit : %d", txPowerLimit);
         }else{
             syslog(LOG_INFO, "-> txPowerLimit : default value");
@@ -481,6 +503,336 @@ static otError ProcessSetTxPowerLimit(void *aContext, uint8_t aArgsLength, char
     return error;
 }
 
+static otError ProcessMfgGetInt8(void *aContext, uint8_t cmdId, uint8_t aArgsLength)
+{
+    otError error = OT_ERROR_INVALID_ARGS;
+    uint8_t outputLen = 0;
+    uint8_t payload[12] = {11};
+    uint8_t payloadLen = 12;
+
+    if(aArgsLength == 1)
+    {
+        payload[1] = cmdId;
+        payload[2] = MFG_CMD_ACTION_GET;
+
+        otPlatRadioMfgCommand(aContext, (uint8_t*)payload, payloadLen, &outputLen);
+
+        if((outputLen >= 5) && (payload[3] == 0))
+        {
+            if(cmdId == MFG_CMD_GET_SET_TXPOWER)
+            {
+                otCliOutputFormat("%d\r\n", ((int8_t)payload[4])/2);
+            }
+            else
+            {
+                otCliOutputFormat("%d\r\n", (int8_t)payload[4]);
+            }
+            error = OT_ERROR_NONE;
+        }
+        else{
+            error = OT_ERROR_FAILED;
+        }
+    }
+
+    return error;
+}
+
+static otError ProcessMfgSetInt8(void *aContext, uint8_t cmdId, uint8_t aArgsLength, char *aArgs[], int8_t min, int8_t max)
+{
+    otError error = OT_ERROR_INVALID_ARGS;
+    uint8_t outputLen = 0;
+    uint8_t payload[12] = {11};
+    uint8_t payloadLen = 12;
+    int8_t setValue = 0;
+
+    if(aArgsLength == 2)
+    {
+        setValue = (int8_t)atoi(aArgs[1]);
+        if((setValue >= min) && (setValue <= max))
+        {
+            payload[1] = cmdId;
+            payload[2] = MFG_CMD_ACTION_SET;
+            if(cmdId == MFG_CMD_GET_SET_TXPOWER)
+            {
+                payload[4] = ((uint8_t)setValue) << 1; // convert dBm to half dBm
+            }
+            else
+            {
+                payload[4] = (uint8_t)setValue;
+            }
+
+            otPlatRadioMfgCommand(aContext, (uint8_t*)payload, payloadLen, &outputLen);
+
+            if((outputLen >= 4) && (payload[3] == 0))
+            {
+                error = OT_ERROR_NONE;
+            }
+            else
+            {
+                error = OT_ERROR_FAILED;
+            }
+        }
+    }
+
+    return error;
+}
+
+static otError ProcessMfgCommands(void *aContext, uint8_t aArgsLength, char *aArgs[])
+{
+    uint8_t payload[12] = {11};
+    uint8_t payloadLen = 12;
+    uint8_t outputLen = 0;
+    otError error = OT_ERROR_INVALID_ARGS;
+    uint8_t cmdId, idx;
+
+    if(aArgsLength == 1)
+    {
+        cmdId = (uint8_t)atoi(aArgs[0]);
+        if((cmdId == 0)||(cmdId == 1))
+        {
+            mfgEnable = cmdId;
+            syslog(LOG_INFO, "MFG command SUCCESS");
+            return OT_ERROR_NONE;
+        }
+    }
+
+    if(mfgEnable == 0)
+    {
+        syslog(LOG_INFO, "MFG command not enabled");
+        otCliOutputFormat("MFG command not enabled. to enable it : mfgcmd 1\r\n");
+        return OT_ERROR_NONE;
+    }
+
+    if ((aArgsLength > 0) && (mfgEnable == 1))
+    {
+        cmdId = (uint8_t)atoi(aArgs[0]);
+
+        switch (cmdId)
+        {
+        case MFG_CMD_GET_SET_CHANNEL: // get channel
+            error = ProcessMfgGetInt8(aContext, MFG_CMD_GET_SET_CHANNEL, aArgsLength);
+            break;
+
+        case MFG_CMD_GET_SET_CHANNEL + 1: // set channel
+            error = ProcessMfgSetInt8(aContext, MFG_CMD_GET_SET_CHANNEL, aArgsLength, aArgs, 11, 26);
+            break;
+
+        case MFG_CMD_GET_SET_TXPOWER: // get txpower
+            error = ProcessMfgGetInt8(aContext, MFG_CMD_GET_SET_TXPOWER, aArgsLength);
+            break;
+
+        case MFG_CMD_GET_SET_TXPOWER + 1: // set txpower
+            error = ProcessMfgSetInt8(aContext, MFG_CMD_GET_SET_TXPOWER, aArgsLength, aArgs, -20, 22);
+            break;
+
+        case MFG_CMD_CONTINUOUS_TX:
+            error = ProcessMfgSetInt8(aContext, MFG_CMD_CONTINUOUS_TX, aArgsLength, aArgs, 0, 1);
+            break;
+
+        case MFG_CMD_GET_SET_PAYLOAD_SIZE: // get
+            error = ProcessMfgGetInt8(aContext, MFG_CMD_GET_SET_PAYLOAD_SIZE, aArgsLength);
+            break;
+
+        case MFG_CMD_GET_SET_PAYLOAD_SIZE + 1: // set
+            error = ProcessMfgSetInt8(aContext, MFG_CMD_GET_SET_PAYLOAD_SIZE, aArgsLength, aArgs, 0, 127);
+            // actual limits are set in MFG function and error is return in case of wrong parameter
+            break;
+
+        case MFG_CMD_GET_RX_RESULT:
+        {
+            if(aArgsLength == 1)
+            {
+                payload[1] = MFG_CMD_GET_RX_RESULT;
+                payload[2] = MFG_CMD_ACTION_GET;
+                otPlatRadioMfgCommand(aContext, (uint8_t*)payload, payloadLen, &outputLen);
+                if(outputLen >= 11)
+                {
+                    otCliOutputFormat("status : %d\r\n", payload[4]);
+                    otCliOutputFormat("rx_pkt_count : %d\r\n", payload[5]|(payload[6]<<8));
+                    otCliOutputFormat("total_pkt_count : %d\r\n", payload[7]|(payload[8]<<8));
+                    otCliOutputFormat("rssi : %d\r\n",(int8_t)payload[9]);
+                    otCliOutputFormat("lqi : %d\r\n", payload[10]);
+                    error = OT_ERROR_NONE;
+                }
+                else{
+                    error = OT_ERROR_FAILED;
+                }
+            }
+        }
+        break;
+
+        case MFG_CMD_START_RX_TEST:
+        {
+            if(aArgsLength == 1)
+            {
+                payload[1] = MFG_CMD_START_RX_TEST;
+                otPlatRadioMfgCommand(aContext, (uint8_t*)payload, payloadLen, &outputLen);
+                error = OT_ERROR_NONE;
+            }
+        }
+        break;
+
+        case MFG_CMD_BURST_TX:
+        {
+            uint8_t mode = 0;
+            if(aArgsLength == 3)
+            {
+                mode = (uint8_t)atoi(aArgs[1]);
+                if(mode < 8)
+                {
+                    payload[1] = MFG_CMD_BURST_TX;
+                    payload[4] = mode;
+                    payload[5] = (uint8_t)atoi(aArgs[2]);
+                    otPlatRadioMfgCommand(aContext, (uint8_t*)payload, payloadLen, &outputLen);
+                    error = OT_ERROR_NONE;
+                }
+            }
+        }
+        break;
+
+        case MFG_CMD_DUTY_CYCLE_TX:
+            error = ProcessMfgSetInt8(aContext, MFG_CMD_DUTY_CYCLE_TX, aArgsLength, aArgs, 0, 1);
+            break;
+
+        case MFG_CMD_GET_SET_CCA_THRESHOLD: // get
+            error = ProcessMfgGetInt8(aContext, MFG_CMD_GET_SET_CCA_THRESHOLD, aArgsLength);
+            break;
+
+        case MFG_CMD_GET_SET_CCA_THRESHOLD + 1: // set
+            error = ProcessMfgSetInt8(aContext, MFG_CMD_GET_SET_CCA_THRESHOLD, aArgsLength, aArgs, -110, 0);
+            break;
+
+        case MFG_CMD_CONTINOUS_CCA_TEST:
+        {
+            if(aArgsLength == 3)
+            {
+                payload[1] = MFG_CMD_CONTINOUS_CCA_TEST;
+                payload[2] = MFG_CMD_ACTION_SET;
+                payload[4] = (uint8_t)atoi(aArgs[1]);
+                payload[5] = (uint8_t)atoi(aArgs[2]);
+                otPlatRadioMfgCommand(aContext, (uint8_t*)payload, payloadLen, &outputLen);
+                if((outputLen >= 4) && (payload[3] == 0))
+                {
+                    error = OT_ERROR_NONE;
+                }
+                else{
+                    error = OT_ERROR_FAILED;
+                }
+            }
+        }
+        break;
+
+        case MFG_CMD_GET_CCA_STATUS: // get
+            error = ProcessMfgGetInt8(aContext, MFG_CMD_GET_CCA_STATUS, aArgsLength);
+            break;
+
+        case MFG_CMD_CONTINOUS_ED_TEST:
+            error = ProcessMfgSetInt8(aContext, MFG_CMD_CONTINOUS_ED_TEST, aArgsLength, aArgs, -127, 127);
+            break;
+
+        case MFG_CMD_GET_ED_VALUE:
+            error = ProcessMfgGetInt8(aContext, MFG_CMD_GET_ED_VALUE, aArgsLength);
+            break;
+
+        case MFG_CMD_PHY_TX_TEST_PSDU:
+        {
+            uint8_t count_opt, gap, ackEnable;
+            if(aArgsLength == 4)
+            {
+                payload[1]  = MFG_CMD_PHY_TX_TEST_PSDU;
+                payload[2]  = MFG_CMD_ACTION_SET;
+
+                count_opt = (uint8_t)atoi(aArgs[1]);
+                gap       = (uint8_t)atoi(aArgs[2]);
+                ackEnable = (uint8_t)atoi(aArgs[3]);
+                if((count_opt < 8) && (gap > 5) && (ackEnable < 2))
+                {
+                    payload[4]  = count_opt;
+                    payload[5]  = gap;
+                    payload[6]  = ackEnable;
+                    otPlatRadioMfgCommand(aContext, (uint8_t*)payload, payloadLen, &outputLen);
+                    error = OT_ERROR_NONE;
+                }
+            }
+        }
+        break;
+
+        case MFG_CMD_PHY_RX_TX_ACK_TEST:
+            error = ProcessMfgSetInt8(aContext, MFG_CMD_PHY_RX_TX_ACK_TEST, aArgsLength, aArgs, 0, 1);
+            break;
+
+        case MFG_CMD_SET_GENERIC_PARAM:
+        {
+            uint16_t panid, destaddr, srcaddr;
+            if(aArgsLength == 5)
+            {
+                panid       = (uint16_t)strtol(aArgs[2], NULL, 16);
+                destaddr    = (uint16_t)strtol(aArgs[3], NULL, 16);
+                srcaddr     = (uint16_t)strtol(aArgs[4], NULL, 16);
+
+                payload[1]  = MFG_CMD_SET_GENERIC_PARAM;
+                payload[2]  = MFG_CMD_ACTION_SET;
+                payload[4]  = (uint8_t) atoi(aArgs[1]); // SEQ_NUM
+                payload[5]  = (uint8_t) (panid & 0xFF); // PAN ID LSB
+                payload[6]  = (uint8_t) ((panid >> 8) & 0xFF); // PAN ID MSB
+                payload[7]  = (uint8_t) (destaddr & 0xFF); // DEST ADDR LSB
+                payload[8]  = (uint8_t) ((destaddr >> 8) & 0xFF); // DEST ADDR MSB
+                payload[9]  = (uint8_t) (srcaddr & 0xFF); // SRC ADDR LSB
+                payload[10] = (uint8_t) ((srcaddr >> 8) & 0xFF); // SRC ADDR MSB
+
+                otPlatRadioMfgCommand(aContext, (uint8_t*)payload, payloadLen, &outputLen);
+                error = OT_ERROR_NONE;
+            }
+        }
+        break;
+
+        default:
+            error = OT_ERROR_NOT_IMPLEMENTED;
+            break;
+        }
+    }
+
+    //HANDLE ERRORS
+    if(error == OT_ERROR_NONE)
+    {
+        syslog(LOG_INFO, "MFG command SUCCESS");
+    }
+    else if(aArgsLength == payloadLen)
+    {
+        // If user passed all the payload, this means this is a direct message for the RCP.
+        // Send it and print the return results.
+        for(idx = 0; idx < payloadLen; idx++)
+        {
+            payload[idx] = (uint8_t)atoi(aArgs[idx]);
+        }
+        otPlatRadioMfgCommand(aContext, (uint8_t *)payload, payloadLen, &outputLen);
+        for(idx = 0; idx < outputLen; idx++)
+        {
+            otCliOutputFormat("%d ", payload[idx]);
+        }
+        otCliOutputFormat("\r\n");
+        error = OT_ERROR_NONE;
+        syslog(LOG_INFO, "MFG command SUCCESS");
+    }
+    else if(error == OT_ERROR_INVALID_ARGS)
+    {
+        syslog(LOG_INFO, "MFG command Invalid parameter");
+        otCliOutputFormat("INVALID PARAMETER\r\n");
+    }
+    else if(error == OT_ERROR_NOT_IMPLEMENTED)
+    {
+        syslog(LOG_INFO, "MFG command not implemented");
+        otCliOutputFormat("NOT IMPLEMENTED\r\n");
+    }
+    else
+    {
+        syslog(LOG_INFO, "MFG command FAILED");
+        otCliOutputFormat("FAILED\r\n");
+    }
+
+    return error;
+}
+
 static const otCliCommand kCommands[] = {
 #if !OPENTHREAD_POSIX_CONFIG_DAEMON_ENABLE
     {"exit", ProcessExit},
@@ -490,6 +842,7 @@ static const otCliCommand kCommands[] = {
     {"ircmd", ProcessIRCmd},       //=> InBand Independent Reset command
     {"seteui64", ProcessSetEui64}, //=> Set ieee.802.15.4 MAC Address
     {"txpwrlimit", ProcessSetTxPowerLimit}, //=> Set TX power limit for 15.4
+    {"mfgcmd", ProcessMfgCommands} //=> Generic VSC for MFG RF commands
 };
 
 int main(int argc, char *argv[])
diff --git a/src/posix/platform/radio.cpp b/src/posix/platform/radio.cpp
index f121300ec..98c129308 100644
--- a/src/posix/platform/radio.cpp
+++ b/src/posix/platform/radio.cpp
@@ -935,6 +935,12 @@ otError otPlatRadioSetTxPowerLimit(otInstance *aInstance, uint8_t txPowerLimit)
     return sRadioSpinel.SetTxPowerLimit(txPowerLimit);
 }
 
+otError otPlatRadioMfgCommand(otInstance *aInstance, uint8_t *payload, const uint8_t payloadLenIn, uint8_t *payloadLenOut)
+{
+    OT_UNUSED_VARIABLE(aInstance);
+    return sRadioSpinel.MfgCmd(payload, payloadLenIn, *payloadLenOut);
+}
+
 const otRadioSpinelMetrics *otSysGetRadioSpinelMetrics(void) { return sRadioSpinel.GetRadioSpinelMetrics(); }
 
 const otRcpInterfaceMetrics *otSysGetRcpInterfaceMetrics(void)
