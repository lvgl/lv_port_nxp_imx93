/*
*  Copyright (c) 2020, The OpenThread Authors.
*  Copyright 2023-2024 NXP
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions are met:
*  1. Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
*  2. Redistributions in binary form must reproduce the above copyright
*     notice, this list of conditions and the following disclaimer in the
*     documentation and/or other materials provided with the distribution.
*  3. Neither the name of the copyright holder nor the
*     names of its contributors may be used to endorse or promote products
*     derived from this software without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
*  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
*  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
*  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
*  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
*  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
*  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
*  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*  POSSIBILITY OF SUCH DAMAGE.
*/

diff --git a/src/core/config/mac.h b/src/core/config/mac.h
index ed1cdc06d..2b15d6329 100644
--- a/src/core/config/mac.h
+++ b/src/core/config/mac.h
@@ -555,4 +555,14 @@
 #define OPENTHREAD_CONFIG_MAC_DATA_POLL_TIMEOUT 100
 #endif
 
+/**
+ * @def OPENTHREAD_CONFIG_MAC_DEFAULT_ABORT_FRAME_RETRIES
+ *
+ * The default maximum number of retries allowed after a abort failure
+ *
+ */
+#ifndef OPENTHREAD_CONFIG_MAC_DEFAULT_ABORT_FRAME_RETRIES
+#define OPENTHREAD_CONFIG_MAC_DEFAULT_ABORT_FRAME_RETRIES 10
+#endif
+
 #endif // CONFIG_MAC_H_
diff --git a/src/core/mac/sub_mac.cpp b/src/core/mac/sub_mac.cpp
index 3a5d83816..155722303 100644
--- a/src/core/mac/sub_mac.cpp
+++ b/src/core/mac/sub_mac.cpp
@@ -74,6 +74,7 @@ void SubMac::Init(void)
     mState           = kStateDisabled;
     mCsmaBackoffs    = 0;
     mTransmitRetries = 0;
+    mAbortRetries    = 0;
     mShortAddress    = kShortAddrInvalid;
     mExtAddress.Clear();
     mRxOnWhenBackoff   = true;
@@ -403,6 +404,7 @@ Error SubMac::Send(void)
 
     mCsmaBackoffs    = 0;
     mTransmitRetries = 0;
+    mAbortRetries    = 0;
 
 #if OPENTHREAD_CONFIG_MAC_ADD_DELAY_ON_NO_ACK_ERROR_BEFORE_RETRY
     mRetxDelayBackOffExponent = kRetxDelayMinBackoffExponent;
@@ -618,6 +620,7 @@ void SubMac::HandleTransmitDone(TxFrame &aFrame, RxFrame *aAckFrame, Error aErro
             mCslLastSync = TimeMicro(static_cast<uint32_t>(otPlatRadioGetNow(&GetInstance())));
         }
 #endif
+        mAbortRetries = 0;
         break;
 
     default:
@@ -646,7 +649,15 @@ void SubMac::HandleTransmitDone(TxFrame &aFrame, RxFrame *aAckFrame, Error aErro
 
     if (shouldRetx)
     {
-        mTransmitRetries++;
+        // Guard band mechanism to increase the retries on Abort during co-ex
+        if ((aError== kErrorAbort) && (mAbortRetries <= OPENTHREAD_CONFIG_MAC_DEFAULT_ABORT_FRAME_RETRIES))
+        {
+            mAbortRetries++;
+        }
+        else
+        {
+            mTransmitRetries++;
+        }
         aFrame.SetIsARetransmission(true);
 
 #if OPENTHREAD_CONFIG_MAC_ADD_DELAY_ON_NO_ACK_ERROR_BEFORE_RETRY
diff --git a/src/core/mac/sub_mac.hpp b/src/core/mac/sub_mac.hpp
index bbdb88485..629052e50 100644
--- a/src/core/mac/sub_mac.hpp
+++ b/src/core/mac/sub_mac.hpp
@@ -640,6 +640,7 @@ private:
     State        mState;
     uint8_t      mCsmaBackoffs;
     uint8_t      mTransmitRetries;
+    uint8_t      mAbortRetries;
     ShortAddress mShortAddress;
     ExtAddress   mExtAddress;
     bool         mRxOnWhenBackoff : 1;
